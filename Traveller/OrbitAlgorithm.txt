5/8/2023

Merging data structures for child orbits - this
implies changes to the algorithm. The original version 
(used in Star) is constrained and shaped by the 
underlying array.

Star uses an array of orbits: Orbit[] orbits
Orbit uses a TreeMap of orbits: TreeMap<Integer,Orbit> moons

In all cases, we want an ordered list by orbit number,
hence the chosen data structures. In the case of Star,
array was simple, and the algorithm produces lists of numbers
before filling them, so this made sense. Additionally, for
Stars, any empty/unassigned slots are intentionally flagged.

For Orbit, however, values are assigned while creating each
satellite so we don't know in advance how many slots to create.
And there's no concern about empties.

For traversal across the entire tree, it's much simpler to
have a single structure and uniformity (as outlined in the 
Composite pattern). It will be easier to shift the Star approach 
over than the reverse, and TreeMaps are overall simpler to work 
with. 

A couple other bonuses:

 * We have the tricky issue of Captured Planets to deal with, 
   which have fractional orbit values and are difficult to do 
   when orbits are implicitly integer values derived from the 
   array indices.

 * Star.createSatellites is called by an external entity (System)
   rather than from within the ctor. IIRC there was a chicken+egg
   issue forcing this design - hoping the revised algorithm doesn't
   suffer from this and we can hide everything behind the ctor.

There are at least a couple special cases, too:

 * The primary star is root of the tree, and has null values
   for some fields and a 'magic number' orbit (see super ctor 
   args below).

 * There is potentially one 'close companion' which doesn't have
   an orbit number or any possibility of its own child satellites.

Unsnarling the algorithm below. (Leaving out extraneous details 
like UWP).

Algorithm in Star -----------------------------

  System_ScoutsEx.ctor(coordinate)                       // stored in Subsector
    Star.ctor(isPrimary=true, system)                    // stored in System
      Orbit.ctor(barycenter=null, orbit#=-1, zone=null)  // initializes Orbit.moons
      Star.retrieveOrbitalZones()
    Star.createSatellites()
      Star.generateCompanionCount()                      // only active on primary + far companions
                                                         // create temp companion list
      [:for each companion:]
        Star.ctor(isPrimary=false, system)               // stored in temp companion list
      Star.generateCompanionOrbits(listCompanion)        // should be in loop?
      Star.calculateMaxOrbits()
      Star.createOrbits(count, maxCompanion)             // sizes/creates Star.orbits[]
      Star.placeCompanions(count, maxCompanion, listCompanion)
      Star.placeNullOrbits()
        Null.ctor(this, orbit#, zone)                    // stored in Star.orbits[]
      Star.placeEmptyOrbits(count, maxCompanion)
        Star.getRandomNullOrbit()
        Empty.ctor(this, orbit#, zone)                   // stored in Star.orbits[]
      Star.placeForbiddenOrbits()
        Forbidden.ctor(this, orbit#, zone)               // stored in Star.orbits[]
      Star.placeCapturedPlanets()                        // still just a stub
      Star.placeGasGiants()
        Star.availableOrbitsForGiants()
        GasGiant.ctor(this, orbit#, zone)                // stored in Star.orbits[]
      Star.placePlanetoidBelts()
        Star.availableOrbitsForPlanetoids()
        Planetoid.ctor(this, orbit#, zone)               // stored in Star.orbits[]
      Star.placePlanets()
        Planet.ctor(this, orbit#, zone)                  // stored in Star.orbits[]
      [:for each companion:]
        Star.createSatellites()

Algorithm in Orbit ----------------------------

  GasGiant/Planet.ctor(barycenter, orbit#, zone)         // stored in parent Star.orbits[]
    Orbit.ctor(barycenter, orbit#, zone)                 // initializes Orbit.moons
    GasGiant/Planet.generateSatelliteCount()
    Orbit.createSatellites(count)
      [:for each count:]
        GasGiant/Planet.generateSatelliteSize()
        Orbit.generateSatelliteOrbit(counter, isRing)
          Orbit.prune(list)
            Orbit.isTaken(orbit)
        Moon/Ring.ctor(barycenter, orbit#, zone)         // stored in Orbit.moons

===============================================
OBSERVATIONS

Possible bug - moons/ring pass their parent planet orbit number
to the super ctor. Probably does not agree with their 'true' value
as stored in the TreeMap key. Investigate.

Also - check whether we really need these references to barycenter and
orbit # in the child object. Could this all be part of the collection
management in the parent component? Query methods on the child could
interrogate the parent instead.

Star ctor is inconsistent w/ the rest, probably because we started out
with the special case primary. Rest of orbit hierarchy takes an orbit
number and that guides the order of operations in calling their ctor.

Leftover from eliminating the previous/separate companions list - we
create a temp list to hold them, _then_ we generate orbits and push them
into the orbits array. Ties with the previous note. Seems like everything
that takes the temp list as an arg should be _inside_ the loop instead.

Once we clean up the ordering and unify, probably opportunity to simplify 
a lot of the special case logic via appropriate subclassing and polymorphism.
For example, should Primary and Companion be subclasses of Star?

Refactoring in progress - structure documented above has already changed, but 
leaving these notes as-is for now. First target is the temporary companions list
and pulling all related operations into the loop. Then we probably pivot towards
moving method calls prior to the createOrbits() call (which initializes the array).
If they run w/o null pointer exception, they are clear. As this progresses, we
start populating the array from the TreeMap and not the reverse - and finally,
we can remove it altogether.

5/9/23

First portions are done -  the temp array has been eliminated, and all method 
calls in Star.createSatellite() are prior to initialization of the Orbit[] 
array. We should be able to track down remaining references next, and eliminate
it - then obts merges with the TreeMap in the superclass (currently Orbit.moons).

And done! We now have a single data structure coming from the superclass, used
for both moons and planets (and all the variants). Lots of additional cleanup
and refactoring to do, and some potential bugs to investigate.

5/10/23

Compare ctors for all members of Orbit hierarchy. There's some inconsistency,
which may be OK, as well as some odd looking calls to super and magic numbers.
(Later we'll extend this comparison to the entire interface...)

Orbit     (Orbit _barycenter, int _orbit, String _zone)

Empty     (Star _barycenter,  int _orbit, String _zone)
  super(_barycenter, _orbit, _zone);

Forbidden (Star _barycenter,  int _orbit, String _zone)
  super(_barycenter, _orbit, _zone);

Null      (Star _barycenter,  int _orbit, String _zone)
  super(_barycenter, _orbit, _zone);

GasGiant  (Star _barycenter,  int _orbit, String _zone)
  super(_barycenter, _orbit, _zone);

Planet    (Orbit _barycenter, int _orbit, String _zone)
  super(_barycenter, _orbit, _zone);

Planetoid (Orbit _barycenter, int _orbit, String _zone)
  super(_barycenter, _orbit, _zone);

Moon      (Orbit _planet,                 String _zone, int _size)
  super(_planet, _planet.orbitNumber, _zone);

Ring      (Orbit _planet,                 String _zone)
  super(_planet.barycenter, _planet.orbitNumber, _zone);

Star      (Boolean _primary, System _parent)
  super(null, -1, (String)null);

Likely artifacts of putting this together over many days, as well as 
following along with the RAW procedure as closely as I could. Some of
this may still be OK, but we should reconcile & rationalize now.

Star is the biggest outlier in terms of how it's handled. Then
second-level satellites (Moons/Rings).

Top level container     : primary Star
Can contain             ~ 
   2nd level leafs      : Empty
                          Forbidden
                          Null
                          Planetoid

   2nd level containers : companion Star
               
   2nd level containers : GasGiant
                          Planet
   Can contain          ~
      3rd level leafs   : Moon
                          Ring

This isn't a 'pure' Composite where we can group and nest components ad hoc.
There are rules for which goes where, and a depth limit. Structure can be
enforced and communicated through the parent back-reference, at least for the
second-level entities, all of which orbit a Star only.

Third-level is trickier - the only common class is the superclass.

Tested the waters by first changing Planet/Planetoid's first argument to
Star. This causes downstream problems in Moon/Ring first from the super-ctor
calls, then later queries against Star that fail with null references. Backing 
this out for now.

Another approach might be to handle everything via Orbit (kind of the point 
of Composite anyway). As needed, we could downcast - and any such instances 
would be candidates for factoring into polymorphic method calls. GasGiant 
most likely to cause problems - try that first. Worked trivially! Do the rest.

Done - all ctors (except Star) have uniform calling convention, with just a 
single special case with Moon:

subclass (Orbit _barycenter, int _orbit, String _zone)
  super(_barycenter, _orbit, _zone)

On to Star...

Besides the special values, the backreference is unique as it goes outside
the Orbit hierarchy. Is it ever used? (And for that matter, is the _barycenter
backreference in all the children used?) If we strip this out it simplifies
matters.

Other than the backreference to System, for Stars we have two cases:

Primary stars: _barycenter==null, _orbit==-1, _zone==null
   none of these fields make sense for the top of the tree
Companion stars: _barycenter, _orbit, _zone
   all these are valid, though the way we construct them, not used
   (and the 'valid' results are somewhat nonsensical - zone for a Star?)

We could approach at least two ways:

* Overloaded ctors - one for the primary, another for the companions
* Subclass Star and move variant behavior down the hierarchy

Probably depends on whether we have any other behavioural differences
outside the ctor. Review the class. We set a boolean flag in the ctor,
and it is referenced 12 times.

1 declaration
3 ctor assignment
1 logic (ctor fromJSON)
1 logic (generateType())
1 logic (generateSize())
2 logic (createSatellites())
1 logic (generateCompanionCount())
1 logic (generateCompanionOrbits())
1 logic (asJSON())


===================================================
5/25/23

Now that we've reworked the Orbit hierarchy, time to tackle Captured Planets.

Core issue is they have a float orbit number, while every other instance 
(and the current codebase) uses integers. The TreeMap makes this possible,
as contrasted with the previous array, but still some trickiness.

Reviewing usage:

- orbitNumber is currently an int
- lots of name string creation, these are trivial
- orbits TreeMap uses Integer as keys
- orbitalZones are stored as array - how to determine for float values?
- UWP.generateSize() uses orbitNumber integer value matches
- JSON functions use integer operations

First obvious approach is to just convert the field to a float and 
deal with all the breaking cases.

What if instead of changing orbitNumber to float we:

- keep orbitNumber as is
- add an 'actualOrbitNumber' field that is:
   - equal to orbitNumber for all except Captured Planets
   - true offset value for Capture Planets
   - rounded to generate 'normal' orbitNumber
   - should show up in display, orbit TreeMap (?)

The more I dig in, more complicated it seems, probably buggy.

How about?

- first, hide orbitNumber behind accessors/mutators
- add a 'Captured' flag
- for non-captured entities, behavior identical to current
- for captured planets, store split values as above

Exploring this last option now... first bit was easy, and done. Now
only the methods on Orbit directly use the field.

Two mutators, one taking an int, the other a float. These set the 
'captured' flag and the orbit values.

All this ought to work and allow us to create captured planets - with
a few remaining gaps:

- we aren't yet pruning or guarding against duplicate orbitNumbers, but
  when we do we need to compare the 'true' orbit values
- in that same vein, the keys in the TreeMap will overwrite
- output all uses the integer/rounded value, so captured status is not
  visible, won't even know we have one

TreeMap seems most significant, assess that next.

(Walking through, finding another small hitch - all Orbit subclasses
take an integer value in their ctors, which is then passed up to the 
super ctor for setting the orbitNumber. Since we only expect Planets
to be captured - not Planetoid/GasGiant/Moon/Ring/etc. - we can just
add a new ctor to Planet that takes a float, and possibly corresponding
ctor in Orbit... we'd also need to slightly adjust the other ctor calls.)

5/27/23

Going to try just changing declaration of the TreeMap to a Float key,
and let the compiler help me find all the spots that need changing.

Done. Not too terrible - all orbit values are displaying in list output
as floats (though since these are all just integers, they are "x.0"). Some
other observations:

- The naive approach I'm taking is to leave everything alone as much as 
  possible, and cast the integer values to float at point of use (which is
  put, get, contains, and iterating over the collection).
- The compiler was able to help with 'put/contains' statements and the iterators
- It couldn't catch 'get' statements, though - these were all runtime
- I fixed up the JSON functionality enough to work without error, but going to 
  have to come back and think about how this should be persisted.
- The current code has a lot of inconsistency w.r.t. testing contents, most notably
  isNull(), which overlaps confusingly with the Null subclass (and after the move
  away from arrays a true null test might not be necessary). If we had hidden more
  of these tests, and even the iterator, behind functions, we could handle the 
  slightly hacky casting in a small number of places. Should come back and do this
  cleanup.
- While the current state compiles and runs to completion w/o error, still not 100%
  confident this is correct and bug-free. Should think about some tests.

5/28/23

After the above changes, I took a first stab at implementing captured planets.
This started throwing NullPointerExceptions from a few locations, most typically 
from Star.placePlanetoids(), as well as occasional ArrayIndexOutOfBounds from 
Star.placePlanetoids().

I think the issue is iterating across the orbits. Due to the way this codebase
grew, there are (at least) two different approaches happening here:

* 'proper' iterating against the orbits collection via keySet
* implicit iterating by an integer counter

Both are flawed, but the latter causes the problem in this case. When we have
a captured orbit beyond the last existing orbit (Null under the current approach),
there are a bunch of 'empties' implied, that the naive iterator touches. They
come back as null from the TreeMap lookup, leading to NullPointer issues.

And for Planets, they just keep adding new instances in the gap, and the
set of orbits outgrows the 21 we've established for the OrbitZone array.

To get this on the right track, should first encapsulate the iterator (and
probably the get/set/contains highlighted above while we're at it). I've pushed
the Captured Planet changes to a side branch so we can work clean, will merge 
back after we've improved the design. (IIRC, Composite calls for this 
collection encapsulation in any case, we just haven't yet truly needed so took
the lazy approach).

5/29/23

Get/set are done, and contains was already done via Orbit.orbitIsTaken, just 
hadn't applied it consistently. Now fixed. That leaves the iterators and possibly 
a small number of one-off cases. Any place we are using orbits.size() is 
suspect. Reviewing usage:

5 instances:
for (int i = 0; i < orbits.size(); i++){
  addOrbit(i, new Forbidden())                       // if isContainer()
  addOrbit(i, new Planet())
  result.append(i)
  result.append(i)
  orbitsList.setString(i, getOrbit(i).toString())    // if isContainer()

1 instance:
for (int i = startCount; i < orbits.size(); i++){
  addOrbit(i, new Empty())

3 instances:
for (float f : orbits.keySet()){
  comps.add((Star)getOrbit(f))
  result.addAll(child.getAllHabitables())             // if isContainer()
  result.addAll(child.getAllGasGiants())              // if isContainer()

These are often coupled with 

  if (orbits.size() > 0)

which is either unnecessary, or at least should be encapsulated - 
we already have isContainer(), so clean that up too while we're at 
it. Once we encapsulate the iterator, this may move inside as 
leaf/container polymorphism should take care of it.

Iterator method added, and the existing float loops have been shifted
over. Minimal gain here, they were already doing the right thing, and 
the Iterator overhead is actually more code. Should see more benefit (and
protection) from the bug that spurred this refactoring) once the integer
loops are handled.

This all goes to the heart of the orbit assignment algorithm, and the 
hints in earlier notes about overhauling the entire thing. Especially
Null/Empty - it comes from a literal reading of RAW, and the initial
array-based implementation. 

There are two numbers governing the build process:
  maxOrbits
  maxCompanionOrbit

First we fill list with Null, then fill gap (if any) with Empty. Then
proceed to assign slots.

---------------------
Scenario: Existing algorithm

maxOrbits = 5 ; maxCompanionOrbit = 7
[7:Companion]

placeNullOrbits(max = 8)           ** iterator
[0:Null,1:Null,2:Null,3:Null,4:Null,5:Null,6:Null,7:Companion]

fillEmptyOrbits(5,7)               ** iterator
[0:Null,1:Null,2:Null,3:Null,4:Null,5:Empty,6:Empty,7:Companion]

placeEmptyOrbits()
getRandomUnassignedOrbit()
size=8
[0:Null,1:Null,2:Null,3:Empty,4:Null,5:Empty,6:Empty,7:Companion]

placeForbiddenOrbits()             ** iterator
[0:Forbidden,1:Null,2:Null,3:Empty,4:Null,5:Empty,6:Empty,7:Companion]

placeCapturedPlanets()
[0:Forbidden,1:Null,2:Null,3:Empty,4:Null,4.1:Planet,5:Empty,6:Empty,7:Companion]

placeGasGiants()   - 1
availableOrbitsForGasGiants()      ** iterator
size=9, IntList = [1,2,4]
[0:Forbidden,1:Null,2:GasGiant,3:Empty,4:Null,4.1:Planet,5:Empty,6:Empty,7:Companion]

placePlanetoidBelts()  - 1
availableOrbitsForPlanetoids()     ** iterator
size=9, IntList = [1,4]
[0:Forbidden,1:Planetoid,2:GasGiant,3:Empty,4:Null,4.1:Planet,5:Empty,6:Empty,7:Companion]

placePlanets()                     ** iterator
[0:Forbidden,1:Planetoid,2:GasGiant,3:Empty,4:Planet,4.1:Planet,5:Empty,6:Empty,7:Companion]

---------------------
Scenario: Alternative algorithm, no Null or FillEmpty

maxOrbits = 5 ; maxCompanionOrbit = 7
[7:Companion]

placeEmptyOrbits()
getRandomUnassignedOrbit()
size=1
[3:Empty,7:Companion]

placeForbiddenOrbits()             ** iterator
[0:Forbidden,3:Empty,7:Companion]

placeCapturedPlanets()
[0:Forbidden,3:Empty,4.1:Planet,7:Companion]

placeGasGiants()   - 1
availableOrbitsForGasGiants()      ** iterator
size=4, xxxxxx IntList = [1,2,4]
[0:Forbidden,2:GasGiant,3:Empty,4.1:Planet,7:Companion]

placePlanetoidBelts()  - 1
availableOrbitsForPlanetoids()     ** iterator
size=5, xxxxxx IntList = [1,4]
[0:Forbidden,1:Planetoid,2:GasGiant,3:Empty,4.1:Planet,7:Companion]

placePlanets()                     ** iterator
[0:Forbidden,1:Planetoid,2:GasGiant,3:Empty,4:Planet,4.1:Planet,7:Companion]

Would require overhaul of all later placement methods. They:
* derive bounds from the list size
* look for Null entries to replace
* work with integer values, normally from a 0:size range


5/30/23

Thinking about it some more, there are two kinds of orbit placements going 
on here: bounded, and unbounded.

Per RAW, a star has a 'maximum orbit' and most entities must be placed 
within this bound (GasGiant, Planetoid, Planet, Empty). But a few entities are allowed outside the limit (notably 
companion Stars and captured Planets). Null is just bookeeping and algorithm 
support (and the "fill in Empties" approach is similar).

So if we use this boundary value instead of the Null orbit placeholders,
we can get the same effect - and probably remove a bunch of suspect code.

Let's look at GasGiants - this is the first straightforward application. We 
should be able to get there stepwise by modifying availableOrbitsForGiants.

(Side observation - the query methods sprinkled across Star and Orbit could
use some cleanup, and they aren't consistently used everywhere - sometimes
there's local hard-coded logic, like in availableOrbitsForGiants... FIXED just
this last instance, worth doing additional cleanup later.)

GasGiants was straightforward; same tactic can be applied to Planetoids.

Planets are also simple for the main case, but potentially tricky for the
fixup that happens in designateMainworld(). We don't have the maxorbit value
accessible - it was a temp in createSatellites(). So the arg to the 
placePlanets() call is unclear. But we're also fiddling with orbits.size()
in here, which is suspect.

Short term, to make this work, just plugging in the newOrbit value used in 
that method. Since we are filling in any gaps from from companions with 
Empty, this works OK, but will need adjustment once that is removed. We 
will need to identify the gap (counting up and matching values perhaps?).

Also, after the previous changes to GasGiants & Planetoids, there's a new
bug showing up under this method. We sometimes exit construction with
an orbits map containing a single Null, which shouldn't have survived
the process. Walking through, I think the conditions are:

* no companions
* max orbit = 0, which places a single Null in the map
* no Empty or Forbidden
* GasGiant, Planetoid and Planet loops are no-op with a zero input

Looks like this (added some debug spew):

	No Habitables currently in-system - adding a new Planet
	orbits.size() = 1 orbits = {0.0=Null 0-O}
	orbits.size() = 2 orbits = {0.0=Null 0-O, 1.0=Null 1-O} newOrbit = 2

Combining this with the patch process in designateMainworld(), we end up
adding _two_ new Planets, so this is sort of OK, but still not quite right. 
Fix might be as simple as making loop <= rather than <, but need to think
it through.
 
I think there's still some muddled code tripping over the difference between
orbit count, orbit number, and the specialness of zero. Ripe for overhaul.

5/31/23

Continuing with the previous, seeing if we can phase out placeNullOrbits() 
and fillEmptyOrbits(). The latter goes away without significant issue (one 
small wrinkle below). But the former causes NullPointerExceptions, so we 
need to shift all the placement methods over to the int argument approach. 
The only ones left that matter are placeEmptyOrbits() and placeForbiddenOrbits().

Forbidden orbits face the same issue as Planets - we call this one twice, 
the second time during the "fixup" process in designateMainworld(). Taking 
the same approach, then once Nulls are gone we can adjust.

As for the 'wrinkle' - once we stop placing the "filled in" Empties, we're
left with Nulls in the gap between maxOrbit and a far companion (so not
every system). Again, once Nulls are safely gone this goes away.

After commenting out both placeNullOrbits and fillEmptyOrbits, I'm seeing
NullPointerExceptions still, because without Null objects the lookup in the
tree via getOrbit() is returning true null. Need to modify the test logic 
in these methods to adapt.

Seems to be working with minimal changes. Still should review all usage 
of getOrbit() to see if we're calling methods directly on the result without 
testing for null. There could still be some corner cases.

Reviewed, fixed a couple more instances, should be safe now. We can 
entirely strip out the Null class, Orbit.isNull(), and other code
associated with this approach. Seems to be running clean.














